#include <stdio.h>

#define MAX 10

int parent[MAX];

// Function to find the parent of a node
int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

// Function to union two subsets
void unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

// Function to implement Kruskal's algorithm
void kruskal(int n, int cost[MAX][MAX]) {
    int mincost = 0;  // Cost of MST

    for (int i = 0; i < n; i++)
        parent[i] = i;

    int edges = 0;
    while (edges < n - 1) {
        int min = 9999, u = -1, v = -1;

        // Find the minimum weight edge
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (find(i) != find(j) && cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }

        unionSet(u, v);
        printf("Edge %d:(%d, %d) cost:%d\n", edges++, u, v, min);
        mincost += min;
        cost[u][v] = cost[v][u] = 9999; // Remove edge
    }

    printf("Minimum cost = %d\n", mincost);
}

int main() {
    int n, cost[MAX][MAX];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    kruskal(n, cost);

    return 0;
}
