#include <stdio.h>
#include <stdlib.h>

#define MAX 10

int adj[MAX][MAX], visited[MAX], queue[MAX];
int front = -1, rear = -1, n;

void enqueue(int vertex) {
    if (rear == MAX - 1) {
        printf("Queue overflow\n");
    } else {
        if (front == -1)
            front = 0;
        queue[++rear] = vertex;
    }
}

int dequeue() {
    int vertex;
    if (front == -1 || front > rear) {
        return -1;
    } else {
        vertex = queue[front++];
        if (front > rear) {
            front = rear = -1;
        }
        return vertex;
    }
}

void BFS(int start) {
    int i, current;
    enqueue(start);
    visited[start] = 1;

    while (front != -1) {
        current = dequeue();
        printf("%d ", current);

        for (i = 0; i < n; i++) {
            if (adj[current][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int u, v, start, edges;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    for (int i = 0; i < edges; i++) {
        printf("Enter edge (u v): ");
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;
        adj[v][u] = 1;
    }

    printf("Enter starting vertex for BFS: ");
    scanf("%d", &start);
    
    printf("BFS Traversal: ");
    BFS(start);

    return 0;
}
